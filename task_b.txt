Step 1: brainstorm on your own

    - I want to be able to specify types for each column
    - CSV parser should take in my column names alongside their specified
    type value
    - Allow the ability to include commas in strings
    - Lack of logic for CSV without headers (if types are declared prior to parsing)

Step 2: use an LLM to help expand your perspective

    **First Prompt: Default Prompt from Sprint Handout**

    - There was definitely some overlap in features, such as quoted fields and
    type conversion.
    - Something that the LLM pointed out was the use of line breaks. I hadn't
    thought of this and would be important to ensure formatting stays consistent
    when parsing CSV files.
    - The LLM missed the point at first by listing both: features/edge cases
    and developer usability. Although suggesting unit testing and proper
    documentation is not necessarily bad advice, it wasn't what I was asking
    at first regarding improvements to the actual parsing logic.


    **Second Prompt: Altered Prompt**

    Prompt: “I’m working on a CSV parser in TypeScript that currently accepts a 
    filename as input and converts rows into strings or objects. What are some 
    missing features or edge cases that I should consider? What are some faults 
    in my parsing logic that I should be including in my program?”

    - For this prompt, I specifically stated that I wanted feedback for program
    logic.

    - Through these changes to the prompt, I was able to get a list of solely
    edge cases and faults through parsing logic to be aware of, which I found
    significantly more helpful than the previous output.


    **Third Prompt: Ask Prompt**

    Prompt: “I’m working on a CSV parser in TypeScript that currently accepts a
    filename as input and converts rows into strings or objects. What are some
    missing features or edge cases that I should consider? What are some faults
    in my parsing logic that I should be including in my program? Ask me a 
    clarifying questions about my implementation to better understand any faults 
    in my current logic."

    - For this prompt, I simply added that the LLM should ask questions
    regarding the current implementation of my CSV parser. Instead of getting
    one clarifying question (which I should've clarified in my prompt), the
    model asked how my implementation was meeting a list of edge cases that the
    parser should be accounting for.